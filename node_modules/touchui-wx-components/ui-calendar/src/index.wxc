<template>
  <view class="ui-calendar">
      <view class="calendar-title">
          <view wx:for="{{['日', '一', '二', '三', '四', '五', '六']}}" class="calendar-weekday">
            {{item}}
          </view>
        </view>
    <swiper class="calendar-wrap"
        current="{{monthSwiperIndex}}"
        bindchange="changeHandler"
      >
        <swiper-item class="calendar-month-body"
          wx:for="{{monthsArray}}"
          wx:for-index="monthIndex"
          wx:key="monthIndex"
          wx:for-item="monthItem"
        >
          <view class="calendar-day-wrap"
            bindtap="touchStartHandler"
            wx:for="{{monthItem.data}}"
            wx:for-index="dayIndex"
            wx:key="dayIndex"
            data-month-index="{{monthIndex}}"
            data-day-index="{{dayIndex}}"
            data-item="{{dayItem}}"
            wx:for-item="dayItem"
          >
            <view 
            class="calendar-day-cell {{disablePastDays && dayItem.isPastDay ? 'is-past-days' : ''}} {{dayItem.isHoliday && dayItem.isThisMonth ? 'is-holiday' : ''}} {{dayItem.isThisMonth ? 'is-this-month' : 'not-this-month'}} {{myItem.value === dayItem.value ? 'is-selected' : ''}} {{dayItem.isRangeLeft ? 'is-selected-left' : ''}} {{dayItem.isRangeRight ? 'is-selected-right' : ''}} {{dayItem.isInRange? 'is-selected-in-range' : ''}}"
            style="background-color: {{dayItem.isInRange ? rangeColor : dayItem.isRangeLeft ? startRangeColor : dayItem.isRangeRight ? endRangeColor : myItem.value === dayItem.value ? themeColor : ''}} {{}}"
            >
              {{dayItem.day}}  
            </view>
          </view>
        </swiper-item>
    </swiper>
  </view>
</template>

<script>
import props from './props.js'
import Dater from '../../libs/date.js'
import OTS from '../../libs/objectToStyle.js'
var moment = require('moment')

export default {
  config: {
    usingComponents: { }
  },
  behaviors: [props],
  data: {
    selectItem: {},
    dayMap: {},
    monthsArray: [],
    oldItem: undefined,
    scrollTop: 0,
    oldRangeLeftItem: undefined,
    oldRangeRightItem: undefined,
    heightCount: 50,
    monthSwiperIndex: 0,
    myItem: undefined
  },
  attached () {
    console.log('attached')


  },
  ready () {
    this.reAttached ()

    console.log(this.data.dayMap)

  },
  methods: {
    reAttached () {
    this.data.monthsArray.splice(0, this.data.monthsArray.length)
    let startMonthAnchor
    let endMonthAnchor
    if (isNaN(  Number(this.data.dateRange[0]))) { // 字符串
      startMonthAnchor = this.data.dateRange[0] + '/01'
      endMonthAnchor = this.data.dateRange[1] + '/01'
    } else {
      startMonthAnchor = moment().subtract(this.data.dateRange[0], 'months').format('YYYY/MM') + '/01'
      endMonthAnchor = moment().add(this.data.dateRange[1], 'months').format('YYYY/MM') + '/01'
    }

    console.log(startMonthAnchor, endMonthAnchor)

    for (let i = 0;; i++) {
      let year = moment(startMonthAnchor).year()
      let month = moment(startMonthAnchor).month() + 1
      let day = moment(startMonthAnchor).date()

      let startMonthDater = new Dater(year, month, day).monthDays // Dater使用的是正常月份
      let monthArray = this.getMonthArray(startMonthDater, i)
      monthArray.monthIndex = i
      this.data.monthsArray.push(monthArray)
      if (moment(startMonthAnchor).isSame(endMonthAnchor, 'month')) { // 相同
        break
      }
      startMonthAnchor = moment(startMonthAnchor).add(1, 'month')
    }

    if (this.data.value) {
      if (typeof this.data.value === 'string') {  
        let dIndex = this.momentTransToItem(moment(this.data.value)).dayIndex
        let mIndex = this.momentTransToItem(moment(this.data.value)).monthIndex
        this.selectSingle(mIndex, dIndex)
      } else {
        let dIndex = this.momentTransToItem(moment(this.data.value[0])).dayIndex
        let mIndex = this.momentTransToItem(moment(this.data.value[0])).monthIndex
        this.selectRange(mIndex, dIndex, true)
        mIndex = this.momentTransToItem(moment(this.data.value[1])).monthIndex
        dIndex = this.momentTransToItem(moment(this.data.value[1])).dayIndex
        this.selectRange(mIndex, dIndex)
      }
    }
    this.setData({
      monthsArray: this.data.monthsArray,
      monthTitleStyle: OTS(this.data.monthTitleStyle),
      calendarWrapStyle: OTS(this.calendarWrapStyleObj())
    })
    // }, 3000);

    },
    changeHandler (e) {
      let index = e.detail.current
      // console.log()
      this.triggerEvent('monthchange', 
      `${this.data.monthsArray[index].year}/${this.data.monthsArray[index].month >= 10 ? '' :'0'}${this.data.monthsArray[index].month}`)
    },
    calendarWrapStyleObj () {
      let style = {}
      style.height = this.data.height + 'px'
      return style
    },
    itemTransToMoment (item) {
      if (item.day) {
        return moment(`${item.year}/${item.month}/${item.day}`)
      } else {
        return moment(`${item.year}/${item.month}`)
      }
    },
    momentTransToItem (moment) {
      for (let i = 0; i < this.data.monthsArray.length; i++) {
        for (let j = 0; j < this.data.monthsArray[i].data.length; j++) {
          if (
            this.data.monthsArray[i].data[j].isThisMonth &&
            moment.isSame(this.itemTransToMoment(this.data.monthsArray[i].data[j]))) {
            return this.data.monthsArray[i].data[j]
          }
        }
      }
    },
    inRangeSelect (rightItem, startI, endI, select) {
      for (let i = startI; i <= endI ; i++) {
        for (let j = 0; j < this.data.monthsArray[startI].data.length; j++) {          
          if (this.data.monthsArray[i].data[j].isThisMonth &&
          this.itemTransToMoment(this.data.monthsArray[i].data[j]).isAfter(this.itemTransToMoment(this.data.oldRangeLeftItem), 'day') && 
          this.itemTransToMoment(this.data.monthsArray[i].data[j]).isBefore(this.itemTransToMoment(rightItem), 'day')) {
            if (select) {
              this.data.monthsArray[i].data[j].isInRange = true
            } else {
              this.data.monthsArray[i].data[j].isInRange = false
            }
          }
          if (this.itemTransToMoment(this.data.monthsArray[i].data[j]).isSame(this.itemTransToMoment(rightItem), 'day')) {
            break
          }
        }
      }
    },
    selectRange (mIndex, dIndex, trans) {
      let selectItem = this.data.monthsArray[mIndex].data[dIndex]
      let selectMoment = this.itemTransToMoment(selectItem)
      if (selectItem.isPastDay && this.data.disablePastDays) {
        this.triggerEvent('failed')
        return
      }
      if (selectItem.isForeDay && this.data.disableForeDays) {
        this.triggerEvent('failed')
        return
      }
      if (selectItem.isToday && !this.data.canSelectToday) {
        this.triggerEvent('failed')
        return
      }
      if (!this.data.oldRangeLeftItem && !this.data.oldRangeRightItem) { // 两边都没有
        selectItem.isRangeLeft = true // 变颜色
        this.data.oldRangeLeftItem = selectItem // 老东西
        this.triggerEvent('selectedstart', selectItem.value)
      } else if (this.data.oldRangeLeftItem, !this.data.oldRangeRightItem) { //左有右没有
        // maxRange选取
        if (this.data.maxRange) {
          if (this.itemTransToMoment(this.data.oldRangeLeftItem).add(this.data.maxRange, 'day').isBefore(selectMoment,'day')) {
            this.triggerEvent('failed')
            return
          }
        }
        if (this.itemTransToMoment(this.data.oldRangeLeftItem).isAfter(selectMoment, 'day')) { // 如果选择在之前
        // this.data.oldRangeLeftItem = this.
        this.data.oldRangeLeftItem.isRangeLeft = false
        selectItem.isRangeLeft = true // 变颜色
        this.data.oldRangeLeftItem = selectItem
        this.triggerEvent('selectedstart', selectItem.value)
        } else if (this.itemTransToMoment(this.data.oldRangeLeftItem).isBefore(selectMoment, 'day')) { // 如果选择在之后

          selectItem.isRangeRight = true // 变颜色
          this.data.oldRangeRightItem = selectItem // 老东西
          let startI = this.data.oldRangeLeftItem.monthIndex
          let endI = selectItem.monthIndex
          this.inRangeSelect(selectItem, startI, endI, true)
          this.triggerEvent('selectedend', selectItem.value)
        } else {
          selectItem.isRangeLeft = false // 变颜色
          this.data.oldRangeLeftItem = undefined
        }
      } else { //如果都有
        let startI = this.data.oldRangeLeftItem.monthIndex
        let endI = this.data.oldRangeRightItem.monthIndex
        this.inRangeSelect(this.data.oldRangeRightItem, startI, endI, false)
        this.data.oldRangeLeftItem.isRangeLeft = false
        this.data.oldRangeRightItem.isRangeRight = false
        this.data.oldRangeRightItem = undefined
        selectItem.isRangeLeft = true // 变颜色
        this.data.oldRangeLeftItem = selectItem // 老东西
        this.triggerEvent('selectedstart', selectItem.value)
      } 
      if (trans) {
        this.setData({
          monthSwiperIndex:mIndex
        })
      }
    },
    selectSingle (mIndex, dIndex) {
      let selectItem = this.data.monthsArray[mIndex].data[dIndex]

      if (selectItem.isPastDay && this.data.disablePastDays) {
        this.triggerEvent('failed')
        return
      }
      if (selectItem.isForeDay && this.data.disableForeDays) {
        this.triggerEvent('failed')
        return
      }
      if (selectItem.isToday && !this.data.canSelectToday) {
        this.triggerEvent('failed')
        return
      }
      
      if (this.data.oldItem) {
        this.data.oldItem.isClicked = false
      }
      this.data.monthsArray[mIndex].data[dIndex].isClicked = true
      
      
      this.data.oldItem = this.data.monthsArray[mIndex].data[dIndex]

      
      this.data.selectItem = this.data.oldItem
      this.setData({
        monthSwiperIndex:mIndex,
        myItem: this.data.selectItem,
        oldItem: this.data.oldItem
      })
      this.triggerEvent('change', selectItem.value)
    },
    touchStartHandler (e) {

      console.time('a')
      let mIndex = e.currentTarget.dataset.monthIndex
      let dIndex = e.currentTarget.dataset.dayIndex
      let selectItem = this.data.monthsArray[mIndex].data[dIndex]
      if (selectItem.isThisMonth === false) {
        return
      }
      if (this.data.selectRangeMode) {
        this.selectRange(mIndex, dIndex)
      } else {
        this.selectSingle(mIndex, dIndex)
      }
      // this.setData({
      //   monthsArray: this.data.monthsArray
      // })
      console.timeEnd('a')
    },
    getMonthArray (date, monthIndex) {
      let monthArray = {}
      let lineCount = 0
      var count = 0
      monthArray.data = []
      monthArray.year = date.year
      monthArray.month = date.month
      for (let i = 0; i < date.preMonthDays.length; i++) {
        let obj = {}
        obj.day = date.preMonthDays[i]
        if (date.month === 1) {
          obj.month = 12
          obj.year = date.year - 1
        } else {
          obj.month = date.month - 1
          obj.year = date.year
        }
        obj.value = `${obj.year}/${obj.month < 10 ? '0' : ''}${obj.month}/${obj.day < 10 ? '0' : ''}${obj.day}`


        obj.isThisMonth = false    
        obj.isClicked = false
        obj.isRangeLeft = false
        obj.isRangeRight = false
        obj.isInRange = false
        obj.monthIndex = monthIndex
        obj.dayIndex = count
        this.data.dayMap[obj.value] = obj
        if ([0, 6].indexOf((moment(obj.value).weekday())) !== -1) {
          obj.isHoliday = true
        }
        monthArray.data.push(obj)
        count++
      }
      for (let i = 0; i < date.thisMonthDays.length; i++) {
        let obj = {}
        obj.day = date.thisMonthDays[i]
        obj.month = date.month
        obj.year = date.year
        obj.isThisMonth = true
        obj.isClicked = false
        obj.isRangeLeft = false
        obj.isRangeRight = false
        obj.isInRange = false
        obj.monthIndex = monthIndex
        obj.dayIndex = count
        obj.value = `${obj.year}/${obj.month < 10 ? '0' : ''}${obj.month}/${obj.day < 10 ? '0' : ''}${obj.day}`
        if ([0, 6].indexOf((moment(obj.value).weekday())) !== -1) {
          obj.isHoliday = true
        }
        if (moment(`${obj.year}/${obj.month}/${obj.day}`).isBefore(moment(), 'day')) {
          obj.isPastDay = true
          obj.isForeDay = true
          obj.isToday = false
        } else if (moment(`${obj.year}/${obj.month}/${obj.day}`).isAfter(moment(), 'day')) {
          obj.isPastDay = false
          obj.isForeDay = true
          obj.isToday = false
        } else {
          obj.isPastDay = false
          obj.isForeDay = false
          obj.isToday = true
        }
        monthArray.data.push(obj)
        count++
        this.data.dayMap[obj.value] = obj
      }
      // if (date.nextMonthDays.length >= 7) {
      //   date.nextMonthDays.splice(date.nextMonthDays.length - 7, 7)
      //   lineCount++
      // }

      for (let i = 0; i < date.nextMonthDays.length; i++) {
        let obj = {}
        obj.day = date.nextMonthDays[i]

        if (date.month === 12) {
          obj.month = 1
          obj.year = date.year + 1
        } else {
          obj.month = date.month + 1
          obj.year = date.year
        }
        obj.isThisMonth = false
        obj.isClicked = false
        obj.isRangeLeft = false
        obj.isRangeRight = false
        obj.isInRange = false
        obj.monthIndex = monthIndex
        obj.dayIndex = count
        obj.value = `${obj.year}/${obj.month < 10 ? '0' : ''}${obj.month}/${obj.day < 10 ? '0' : ''}${obj.day}`
        if ([0, 6].indexOf((moment(obj.value).weekday())) !== -1) {
          obj.isHoliday = true
        }
        monthArray.data.push(obj)
        count++
        this.data.dayMap[obj.value] = obj

      }
      monthArray.positionY = this.data.heightCount


      monthArray.value = `${date.year}/${date.month > 10 ? '' : '0'}${date.month}`



      if (lineCount === 0) {
        monthArray.monthHeight = 350
      } else if (lineCount === 1) {
        monthArray.monthHeight = 300
      } else {
        monthArray.monthHeight = 250
      }
      this.data.heightCount += monthArray.monthHeight
      return monthArray
    },
  }
}

</script>

<style lang="less">
.ui-calendar {
  background-color: white;
  .calendar-title {
    height:50px;

    .calendar-weekday {
      height:50px;
      width:14.2857%;
      float: left;
      line-height: 50px;
      text-align: center;
    }
  }
  .calendar-wrap {
    height: 300px;
  }
    .calendar-month-body{
      .calendar-month-title{
        height: 50px;
        text-align: center;
        line-height: 50px;
      }
      .calendar-day-wrap {
        height:50px;
        width:14.2857%;
        float: left;
        text-align: center;
        horizontal-align: middle;
        line-height: 50px;
        .calendar-day-cell {
          width: 32px;
          height: 32px;
          line-height: 32px;
          margin: 9px auto;
          border-radius: 16px;
        }
        .not-this-month {
          color: gray;
          /* display: none; */
        }
        .is-this-month {
          color: black
        }
        .is-holiday {
          color: red
        }
        .is-today {
          background-color: #808080;
          color: white;       
        }
        .is-selected {
          background-color: @theme-color;
          color: white;
        }
        .is-selected-left {
          background-color: @theme-color;
          color: white;
        }
        .is-selected-right {
          background-color: red;
          color: white;
        }
        .is-selected-in-range {
          background-color: pink;
          color: white;
        }
        .is-past-days {
          color: gray;
        }
        .is-fore-days {
          color: gray;
        }
      }
  }
}
</style>
