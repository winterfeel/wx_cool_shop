<template>
  <view class="ui-count-down">


    <view
      wx:if="{{timeUp}}"
      class="time-up"
    >
    {{doneText}}
    </view>


    <view class="count-down-wrap" wx:if="{{!timeUp}}">
      <view class="count-down-item" 
        style="{{item.type === 'split' ? selfSplitStyle : selfNumberStyle}}" 
        wx:for="{{itemArray}}" wx:key="" >{{item.value}}</view>
      </view>
    </view>

  <view
  
  
  ></view>
</template>

<script>
import StyleHelper from '../../libs/StyleHelper.js'
let moment = require('moment')


export default {
  config: {
    usingComponents: {}
  },
  behaviors: [],
  properties: {
    time: {
      type: [Number, String],
      value: moment().add(1, 'days').format('YYYY/MM/DD HH:mm:ss'),
    },
    timetype: {
      type: String,
      value: 'datetime'
    },
    format: {
      type: String,
      value: '{%d}天{%h}时{%m}分{%s}秒'
    },
    doneText: {
      type: String,
      value: ''
    },
    numStyle: {
      type: String,
      value: ''
    },
    splitStyle: {
      type: [String, Object],
      value: '',
      observer (val) {
        console.log(123)
        this.setData({
          selfSplitStyle: StyleHelper.getPlainStyle(val),
        })
      }
    },
    numberStyle: {
      type: [String, Object],
      value: '',
      observer (val) {
        console.log(StyleHelper.getPlainStyle(val))
        this.setData({
          selfNumberStyle: StyleHelper.getPlainStyle(val)
        })
      }
    },
    doneText: {
      type: String,
      value: '已结束'
    }
  },
  data: {
    futureTimeStamp: undefined,
    itemArray: [],
    mode: 0,
    day: undefined,
    hour: undefined,
    minute: undefined,
    second: undefined,
    selfSplitStyle: '',
    selfNumberStyle: ''
  },
  attached () {
    this.setData({
      selfSplitStyle: StyleHelper.getPlainStyle(this.data.splitStyle),
      selfNumberStyle: StyleHelper.getPlainStyle(this.data.numberStyle)
    })
    console.log(this.data.selfNumberStyle)

    this.onPageShow()
  },
  ready () {
  },
  detached () {
    this.onPageHide()
  },
  methods: {
    onPageHide () {
      if (this.data.interval) {
        clearInterval(this.data.interval)
      }
    },
    onPageShow () {
      if (this.data.timetype === 'second') {
        this.data.futureTimeStamp = Math.floor(moment().add(this.data.time, 'seconds').format('x') / 1000)
      } else {
        this.data.futureTimeStamp = Math.floor(moment(this.data.time).format('x') / 1000)
      }
      let tempArray = this.data.format.split(/(\{.*?\})/)
      tempArray.forEach((item) => {
        let obj = {}
        if (item === '{%d}') {
          obj.type = 'day'
          obj.value = ''
          this.data.day = obj
        } else if (item === '{%h}') {
          obj.type = 'hour'
          obj.value = ''
          this.data.hour = obj
        } else if (item === '{%m}') {
          obj.type = 'minute'
          obj.value = ''
          this.data.minute = obj
        } else if (item === '{%s}') {
          obj.type = 'second'
          obj.value = ''
          this.data.second = obj
        } else {
          obj.type = 'split'
          obj.value = item
        }
        this.data.itemArray.push(obj)
      })
      this.startCountDown()
    },
    startCountDown () {
      this.data.interval = setInterval(() => {
        let diffSecond = Math.floor(moment(this.data.futureTimeStamp * 1000).diff(moment()) / 1000)
        this.data.timeUp = diffSecond < 0 ? true : false
        if (this.data.timeUp) {
          this.setData({
            timeUp: this.data.timeUp
          })
          this.triggerEvent('timeup')
          clearInterval(this.data.interval)
        } else {
          if (this.data.day) {
            this.data.day.value = Math.floor(diffSecond / (60 * 60 * 24))
            diffSecond = diffSecond % (60 * 60 * 24)
          }
          if (this.data.hour) {
            this.data.hour.value = Math.floor(diffSecond / (60 * 60))
            diffSecond = diffSecond % (60 * 60)
          }
          if (this.data.minute) {
            this.data.minute.value = Math.floor(diffSecond / 60)
            diffSecond = diffSecond % 60
          }
          if (this.data.second) {
            this.data.second.value = Math.floor(diffSecond)
          }
          this.setData({
            itemArray: this.data.itemArray
          })
        }

      }, 1000)
    }
  }
}

</script>

<style lang="less">
  .ui-count-down {
    .count-down-item {
      display: inline;
    }
  }

</style>

