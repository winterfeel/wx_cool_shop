<template>
  <!-- <view wx:if="{{num != undefined}}"
    :style="{{numColor}}">{{num}}</view> -->
</template>
  
  <script>
    import { tween } from 'shifty'
  
    const MANUAL = 'manual'
    const AUTO = 'auto'
    const RE_FLOAT = /^\d+(\.\d+)?$/
    const RE_INT = /^\[1-9][0-9]*$/
    const RE_COLOR = /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$/
    const isNumber = (v) => {
      return typeof v === 'number' || (
        typeof v === 'string' && (RE_FLOAT.test(v) || RE_INT.test(v))
      )
    }
    const isColor = (v) => {
      return RE_COLOR.test(v)
    }
    const hexToRGB = (hex) => {
      hex = hex.replace('#', '')
      if (hex.length === 3) {
        hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`
      }
      return {
        r: parseInt(hex.substr(0, 2), 16),
        g: parseInt(hex.substr(2, 2), 16),
        b: parseInt(hex.substr(4, 2), 16)
      }
    }
    const extend = (target, source) => {
      for (let k in source) {
        target[k] = source[k]
      }
    }
    export default {
      properties: {
        from: {
          type: [Number, String],
        },
        to: {
          type: [Number, String],

        },
        duration: {
          type: [Number, String],
          value: 1000,
        },
        easing: {
          type: String,
          value: 'easeOutQuad'
        },
        mode: {
          type: String,
          value: AUTO
        },
        fromColor: {
          type: String,
        },
        toColor: {
          type: String,
        }
      },
      data: {
          num: undefined,
          options: undefined,
          state: 0, // 0: stop, 1: animation started
          numColor: {}
      },
      ready () {
        this.makeOptions()
        if (this.data.mode === AUTO) this.start()
        if (this.data.mode === MANUAL) {
          typeof this.data._from === 'string'
            ? this.data.num = this.data.formatter(parseFloat(this.data._from))
            : this.data.num = this.data.formatter(this.data._from)
          if (this.data._fromColor && this.data._toColor) {
            let {r, g, b} = hexToRGB(this.data._fromColor)
            this.data.numColor = ` color: rgb(${parseInt(r)}, ${parseInt(g)}, ${parseInt(b)})` 
          }
        }
        this.updateData()
      },
      methods: {
        updateData() {
          this.setData({
            mode: this.data.mode,
            num: this.data.num,
            _fromColor: this.data._fromColor,
            numColor: this.data.numColor,
            _toColor: this.data._toColor,
            _to: this.data._to,
            options: this.data.options,
            state: this.data.state,
          })
        },
        updateNumber (state) {
          this.data.num = this.data.formatter
            ? this.data.formatter(state.x)
            : state.x
          this.data.numColor = `color: rgb(${parseInt(state.r)}, ${parseInt(state.g)}, ${parseInt(state.b)})`
          this.updateData()

        },
        makeOptions () {
          let from = typeof this.data._from === 'string'
            ? { x: parseFloat(this.data._from) }
            : { x: this.data._from }
          let to = typeof this.data._to === 'string'
            ? { x: parseFloat(this.data._to) }
            : { x: this.data._to }
          if (this.data._fromColor && this.data._toColor) {
            let fromRGB = hexToRGB(this.data._fromColor)
            extend(from, fromRGB)
            let toRGB = hexToRGB(this.data._toColor)
            extend(to, toRGB)
          }
          let duration = typeof this.data.duration === 'string'
            ? parseFloat(this.data.duration)
            : this.data.duration
          this.data.options = {
            from: from,
            to: to,
            duration: duration,
            easing: this.data.easing,
            step: this.data.updateNumber
          }
          this.updateData()

        },
        start () {
          if (this.data.state > 0) return
          this.data.state = 1
          tween(this.data.options).then(this.data.updateNumber).then(() => {
            this.data.state = 0
            if (this.data.animateEnd) this.data.animateEnd(parseFloat(this.data.num))
          })
          this.updateData()

        },
        reset (from, to, fromColor, toColor) {
          this.data.options.from = typeof from === 'string'
            ? { x: parseFloat(from) }
            : { x: from }
          this.data.options.to = typeof to === 'string'
            ? { x: parseFloat(to) }
            : { x: to }
          if (fromColor && isColor(fromColor) && toColor && isColor(toColor)) {
            let fromRGB = hexToRGB(fromColor)
            extend(this.data.options.from, fromRGB)
            let toRGB = hexToRGB(toColor)
            extend(this.data.options.to, toRGB)
          }
          this.updateData()
        }
      }
    }
  </script>
  