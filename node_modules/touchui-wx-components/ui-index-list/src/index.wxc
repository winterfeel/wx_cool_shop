<template>
  <view class="ui-index-list" style="height: {{       }}px">
    <view class="index-list-wrap" style="height: {{height}}px">
      <view class="index-selector-wrap" 
      catchtouchstart="selectTouchStartHandler"
      catchtouchmove="selectTouchMoveHandler"
      catchtouchend="selectTouchEndHandler"
      style="{{indexSelectorWrapStyle}}">
        <view 
          class="index-selector-item"
          style="top: {{index * 16}}px"
          wx:for="{{indexData}}"
          wx:key="index"
          >{{item}}
        </view>
      </view>
      <scroll-view
        scroll-y	
        scroll-top="{{scrollTop}}"
        class="index-list"
        height="{{height}}"

        style="{{indexListStyle}}"
        >
        <view class="index-list-top">
          <view wx:if="{{showTop}}">
              <slot></slot>
          </view>
        </view>
        <view class="index-list-block"
          wx:for="{{data}}"
          wx:for-item="blockItem"
          wx:for-index="blockIndex"
          wx:key="{{blockIndex}}"
          >
          <view class="index-list-title">{{blockItem.index}}</view>
          <view class="index-list-content {{listItem.disabled ? 'index-list-content-disabled' : ''}}"
            data-item="{{listItem}}"
            data-name="{{listItem.name}}"
            data-index="{{listIndex}}"
            data-block-index="{{blockIndex}}"
            wx:for="{{blockItem.items}}"
            wx:for-item="listItem"
            wx:for-index="listIndex"
            wx:key="{{listIndex}}"
            bindtap="selectTapHandler"
          >
              {{listItem.name}}
          </view>
        </view>
      </scroll-view>
    </view>
    <view
      class="index-float-block"
      style="{{indexFloatBlockStyle}};{{indexFloatBlockDynamicStyle}}"
    >{{bigIndex}}</view>
    <!-- <view>UiIndexList Component</view> -->
  </view>
</template>

<script>
import OTS from '../../libs/objectToStyle.js'
import props from './props.js'
export default {
  config: {
    usingComponents: { }
  },
  behaviors: [props],
  data: {
    windowHeight: 0,
    scrollTop: 0,
    bigIndex: '',
    blockOpacity: 0,
    indexData: []
  },
  attached () {


    this.updateAttached()
    // this.data.data.splice(0, 0, {index: 'Top', items: [{name: 'ans'}]})

  },

  ready () {
    this.updateReady()
  },

  methods: {
    updateAttached () {
      this.data.indexData.splice(0, this.data.indexData.length)
      this.data.data.forEach((element) => {
      this.data.indexData.push(element.index)
      })
      if (this.data.showTop) {
        this.data.indexData.splice(0, 0, 'Top')
      }
      this.setData({
        indexData: this.data.indexData
      })
      try {
        let res = wx.getSystemInfoSync()
        this.data.windowHeight = res.windowHeight
        this.data.windowWidth = res.windowWidth
      } catch (e) {
      }
    },
    updateReady () {
      if (!this.data.flag) {
        this.data.flag = 1
        return
      }
      wx.createSelectorQuery().in(this).select('.index-list-top').boundingClientRect((res) => {
        this.data.indexListTopPosition = res.height
        // console.log(this.data.indexListTopPosition)
        let posY = this.data.indexListTopPosition
        for (let i = 0; i < this.data.data.length; i++) {
          this.data.data[i].position = posY
          posY += 24 + 54 * this.data.data[i].items.length
        }
        this.setData({
          indexSelectorWrapStyle: OTS(this.indexSelectorWrapStyleObj()),
          indexListStyle: OTS(this.indexListStyleObj()),
          indexFloatBlockStyle: OTS(this.indexFloatBlockStyleObj())
        })
      }).exec()
    },
    indexFloatBlockDynamicStyleObj () {
      let style = {}
      style.opacity = this.data.blockOpacity
      return style
    },
    indexFloatBlockStyleObj () {
      let style = {}
      style.top = (this.data.windowHeight - 100) / 2 + 'px'
      style.left = (this.data.windowWidth - 100) / 2 + 'px'
      return style
    },
    indexListStyleObj () {
      let style = {}
      if (this.data.height) {
        style.height = this.data.height + 'px'
      } else {
        style.height = this.data.windowHeight + 'px'
      }
      return style
    },
    indexSelectorWrapStyleObj () {
      let height =  this.data.data.length * 16
      let style = {}
      if (this.data.color) {
        style.color = this.data.color
      }
      style.height = height + 'px'
      style.top = (this.data.height - height) / 2 + 'px'
      // console.log(this.data.windowHeight, height, style.top)
      return style
    },
    selectTouchStartHandler (e) {
      let fingerY = e.touches[0].clientY
      let offsetTop = e.currentTarget.offsetTop
      this.data.itemIndex = Math.floor((fingerY - offsetTop) / 16 - (this.data.showTop ? 1 : 0))
      console.log(this.data.itemIndex)
      if (this.data.itemIndex === -1) {
        this.data.scrollTop = 0
        this.data.blockOpacity = 1

        this.setData({
          scrollTop: this.data.scrollTop,
          bigIndex: 'Top',
          indexFloatBlockDynamicStyle: OTS(this.indexFloatBlockDynamicStyleObj())
        })

      } else {
        this.data.scrollTop = this.data.data[this.data.itemIndex].position
        this.data.blockOpacity = 1
        this.setData({
          scrollTop: this.data.scrollTop,
          bigIndex: this.data.data[this.data.itemIndex].index,
          indexFloatBlockDynamicStyle: OTS(this.indexFloatBlockDynamicStyleObj())
        })
      }
    },
    selectTouchMoveHandler (e) {
      let fingerY = e.touches[0].clientY
      let offsetTop = e.currentTarget.offsetTop
      let itemIndex = Math.floor((fingerY - offsetTop) / 16 - (this.data.showTop ? 1 : 0))

      if (itemIndex === -1) {
        this.data.scrollTop = 0
        this.setData({
          scrollTop: this.data.scrollTop,
          bigIndex: 'Top'
        })
      } else if (this.data.data[itemIndex]) {
        this.data.scrollTop = this.data.data[itemIndex].position
        this.setData({
          scrollTop: this.data.scrollTop,
          bigIndex: this.data.data[itemIndex].index,
        })
      }
    },
    selectTouchEndHandler () {
      this.data.blockOpacity = 0
      this.setData({
        indexFloatBlockDynamicStyle: OTS(this.indexFloatBlockDynamicStyleObj())
      })
    },
    selectTapHandler (e) {
      if (e.currentTarget.dataset.disabled) {
        return
      }
      if (this.data.checkbox) {
        console.log(e.currentTarget.dataset.blockIndex, e.currentTarget.dataset.index)
        let item = this.data.data[e.currentTarget.dataset.blockIndex].items[e.currentTarget.dataset.index]
        item.checked = !item.checked
      }
      this.setData({
        data: this.data.data
      })
      console.log(this.data.data)
      this.triggerEvent('customtap', e.currentTarget.dataset.item)
    }
   }
}


</script>

<style lang="less">
  .index-float-block {
    transition: opacity 1s;
    opacity: 0;
    position: fixed;
    text-align: center;
    width: 100px;
    height: 100px;
    border-radius: 50px;
    background-color: rgba(0, 0, 0, 0.5);
    font-size: 50px;
    line-height: 100px;
    color: white;
  }

  
.ui-index-list {
  position: relative;
  overflow: hidden;
  background-color: #FEFEFE;
  .index-selector-wrap {
    position: fixed;
    z-index: 2;
    font-size: 10px;
    right: 0px;
    text-align: center;
    width: 30px;
    color: @theme-color;
    border-radius: 5px;
    .index-selector-item {
      width: 30px;
      text-align: center;
      position: absolute;
      height: 16px;
    }
  }
  .index-list {
  }

  

  .index-list-title {
      height: 24px;
      font-size: 10px;
      background-color: #f4f6f8;
      color: #808080;
      line-height: 24px;
      padding-left: 8px;
    }
    .index-list-content {
      padding-left: 8px;
      height: 54px;
      line-height: 54px;
      border-bottom: #f4f6f8 solid 1px;
    }
    .index-list-content-disabled {
      padding-left: 8px;
      height: 54px;
      line-height: 54px;
      background-color: #CCC;
      border-bottom: #f4f6f8 solid 1px;
    }
    .index-list-button {
      float: right; 
      margin-top: 12px;
      margin-right: 28px
    }
}
</style>
